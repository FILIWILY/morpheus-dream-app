import express from 'express';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (../../.env –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ src/server.js)
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('[ENV] DATABASE_TYPE:', process.env.DATABASE_TYPE);
console.log('[ENV] NODE_ENV:', process.env.NODE_ENV);
console.log('[ENV] DANGEROUSLY_BYPASS_AUTH:', process.env.DANGEROUSLY_BYPASS_AUTH);

// –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ .env
import axios from 'axios';
import { getDreamInterpretation } from './services/ai_provider.js';
import { getDreamAtmosphere, calculateTopTransits, getCosmicPassport } from './services/astrology.js';
import { calculateNatalChart } from './services/natalChart.js';
import { verifyTelegramAuth } from './middleware/auth.js';
import TelegramBot from 'node-telegram-bot-api';
import { WebSocketServer } from 'ws';
import http from 'http';

// --- Telegram Bot Setup ---
const setupTelegramBot = () => {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const webAppUrl = process.env.TELEGRAM_WEB_APP_URL;

  if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN is not set. Bot setup is skipped.');
    return;
  }

  if (!webAppUrl) {
    console.error('‚ùå TELEGRAM_WEB_APP_URL is not set. Bot menu button will not be updated.');
    return;
  }

  const bot = new TelegramBot(token);

  bot.setMyCommands([
    {
      command: '/start',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
    }
  ]).then(() => {
    console.log('ü§ñ Telegram commands updated.');
  }).catch(console.error);

  bot.setChatMenuButton({
    menu_button: {
      type: 'web_app',
      text: '–û—Ç–∫—Ä—ã—Ç—å Morpheus',
      web_app: {
        url: webAppUrl
      }
    }
  }).then(() => {
    console.log(`‚úÖ Telegram menu button updated to point to: ${webAppUrl}`);
  }).catch((error) => {
    console.error('Failed to set chat menu button:', error.response ? error.response.body : error);
  });

  console.log('ü§ñ Telegram Bot setup complete.');
};


// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç database.js –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const db = await import('./services/database.js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
await db.initializeDatabase();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
setupTelegramBot();

const app = express();
const server = http.createServer(app); // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Express
const wss = new WebSocketServer({ server }); // –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ö HTTP —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 9000;

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¢–∞—Ä–æ ---
const MAJOR_ARCANA = [
    "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
    "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞",
    "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
];

const TAROT_POSITIONS = [
    "–ü—Ä–∏—á–∏–Ω–∞ –°–Ω–∞", "–¢–µ–º–∞ –°–Ω–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ/–ë–ª–æ–∫", "–ü–æ—Å–ª–∞–Ω–∏–µ/–°–æ–≤–µ—Ç", "–£—Ä–æ–∫/–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"
];

app.use(cors());
app.use(express.json());

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¢–∞—Ä–æ ---
const shuffleAndPick = (arr, count) => {
    const shuffled = [...arr].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
};

const generateTarotSpread = () => {
    const selectedCards = shuffleAndPick(MAJOR_ARCANA, 5);
    return TAROT_POSITIONS.map((position, index) => ({
        position: position,
        cardName: selectedCards[index]
    }));
};

// --- –ú–∞—Ä—à—Ä—É—Ç—ã API ---
// All routes will now be protected by the new authentication middleware.
app.use(verifyTelegramAuth);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.get('/profile', async (req, res) => {
    try {
        const userProfile = await db.getProfile(req.userId);
        if (userProfile) {
            res.status(200).json(userProfile);
        } else {
            res.status(404).json({ error: 'Profile not found or empty' });
        }
    } catch (error) {
        console.error('Error fetching profile:', error);
        res.status(500).json({ error: 'Failed to fetch profile' });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD
const convertDateFormat = (dateString) => {
    if (!dateString) return null;
    
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (/^\d{4}-\d{2}-\d{2}/.test(dateString)) {
        return dateString.split('T')[0]; // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD
    const match = dateString.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
    if (match) {
        const [, day, month, year] = match;
        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    }
    
    console.warn(`[SERVER] Invalid date format received: ${dateString}`);
    return null;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.put('/profile', async (req, res) => {
    const { birthDate, birthTime, birthPlace, gender, onboardingCompleted } = req.body;
    let userProfile = (await db.getProfile(req.userId)) || {};

    if (process.env.NODE_ENV !== 'production') {
        console.log(`[SERVER] üì• Received profile update for user ${req.userId}:`, req.body);
        console.log(`[SERVER] üöª Gender from request body:`, gender);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    if (onboardingCompleted !== undefined) {
        userProfile.onboardingCompleted = onboardingCompleted;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
    const convertedBirthDate = convertDateFormat(birthDate);
    if (birthDate && !convertedBirthDate) {
        return res.status(400).json({ error: 'Invalid birth date format. Expected DD.MM.YYYY or YYYY-MM-DD' });
    }
    
    userProfile.birthDate = convertedBirthDate;
    userProfile.birthTime = birthTime;
    userProfile.gender = gender;
    
    if (process.env.NODE_ENV !== 'production') {
        console.log(`[SERVER] Date conversion: "${birthDate}" -> "${convertedBirthDate}"`);
        console.log(`[SERVER] üöª Gender assigned to userProfile:`, userProfile.gender);
    }

    // –ù–æ–≤–∞—è, –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ birthPlace
    try {
        const apiKey = process.env.GOOGLE_GEOCODING_API_KEY;
        let geocodeResponse = null;

        if (birthPlace && birthPlace.placeId) {
            console.log(`[Geocode] Attempting geocoding with placeId: ${birthPlace.placeId}`);
            // 1. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ placeId
            geocodeResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {
                params: { place_id: birthPlace.placeId, key: apiKey, language: 'ru' }
            });
        } else if (birthPlace && birthPlace.description) {
            console.log(`[Geocode] Attempting geocoding with address: "${birthPlace.description}"`);
            // 2. –ó–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–±: –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
            geocodeResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {
                params: { address: birthPlace.description, key: apiKey, language: 'ru' }
            });
        }

        if (geocodeResponse && geocodeResponse.data.status === 'OK' && geocodeResponse.data.results.length > 0) {
            const result = geocodeResponse.data.results[0];
            const location = result.geometry.location;
            userProfile.birthPlace = result.formatted_address;
            userProfile.birthLatitude = location.lat;
            userProfile.birthLongitude = location.lng;
            console.log(`[Geocode] ‚úÖ Success: ${userProfile.birthPlace} [${location.lat}, ${location.lng}]`);
        } else {
            // –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω—ã—Ö
            if (geocodeResponse) {
                console.error(`[Geocode] ‚ùå Failed: ${geocodeResponse.data.status}`, geocodeResponse.data.error_message || '');
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            userProfile.birthPlace = (birthPlace && typeof birthPlace === 'object') ? birthPlace.description : birthPlace;
            delete userProfile.birthLatitude;
            delete userProfile.birthLongitude;
        }
    } catch (error) {
        console.error('[Geocode] üí• Hard error during geocoding:', error.message);
        // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        userProfile.birthPlace = (birthPlace && typeof birthPlace === 'object') ? birthPlace.description : birthPlace;
        delete userProfile.birthLatitude;
        delete userProfile.birthLongitude;
    }

    // –†–∞—Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (userProfile.birthLatitude && userProfile.birthLongitude) {
        console.log('Attempting to calculate natal chart with coordinates...');
        const natalChart = await calculateNatalChart(
            userProfile.birthDate,
            userProfile.birthTime,
            userProfile.birthLatitude,
            userProfile.birthLongitude
        );

        if (natalChart) {
            userProfile.natalChart = natalChart;
            console.log('Natal chart calculated successfully.');
        } else {
            delete userProfile.natalChart; // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è
            console.log('Natal chart calculation failed, removing from profile.');
        }
    } else {
        // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç, —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞
        delete userProfile.natalChart;
        console.log('No coordinates, skipping natal chart calculation.');
    }

    try {
        const updatedProfile = await db.updateProfile(req.userId, userProfile);
        res.status(200).json(updatedProfile);
    } catch (error) {
        console.error('Error updating profile:', error);
        res.status(500).json({ error: 'Failed to update profile' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–Ω–æ–≤
app.get('/dreams', async (req, res) => {
    try {
        const dreams = await db.getDreams(req.userId);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω—ã –ø–æ –¥–∞—Ç–µ, –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        const sortedDreams = dreams.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        res.status(200).json(sortedDreams);
    } catch (error) {
        console.error('Error fetching dreams:', error);
        res.status(500).json({ error: 'Failed to fetch dreams' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–Ω–∞ –ø–æ id
app.get('/dreams/:dreamId', async (req, res) => {
  const { dreamId } = req.params;
  console.log(`[Server] üîç Fetching dream by ID: ${dreamId} for user: ${req.userId}`);
  console.log(`[Server] Request headers:`, {
    'X-Telegram-Init-Data': req.headers['x-telegram-init-data'] ? '[PRESENT]' : '[MISSING]',
    'X-Telegram-User-ID': req.headers['x-telegram-user-id'] || '[MISSING]'
  });
  try {
      const dream = await db.getDreamById(req.userId, dreamId);
      if (!dream) {
        console.log(`[Server] ‚ùå Dream not found: ${dreamId} for user: ${req.userId}`);
        console.log(`[Server] üí° This could mean:`);
        console.log(`[Server]    1. Dream doesn't exist in DB`);
        console.log(`[Server]    2. Dream belongs to different user`);
        console.log(`[Server]    3. Dream was not saved properly (check title/summary)`);
        return res.status(404).json({ error: 'Dream not found' });
      }
      console.log(`[Server] ‚úÖ Dream found: ${dreamId}`);
      console.log(`[Server] üìä Dream data:`, { 
        id: dream.id, 
        title: dream.title || '[NULL]', 
        hasLenses: !!dream.lenses,
        lensCount: dream.lenses ? Object.keys(dream.lenses).length : 0
      });
      res.status(200).json(dream);
  } catch (error) {
      console.error(`[Server] Error fetching dream ${dreamId}:`, error);
      res.status(500).json({ error: 'Failed to fetch dream' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–æ–≤
app.delete('/dreams', async (req, res) => {
  const { dreamIds } = req.body;
  if (!dreamIds || !Array.isArray(dreamIds)) {
    return res.status(400).json({ error: 'dreamIds must be an array' });
  }
  try {
      await db.deleteDreams(req.userId, dreamIds);
      res.status(200).json({ message: 'Dreams deleted successfully' });
  } catch (error) {
      console.error('Error deleting dreams:', error);
      res.status(500).json({ error: 'Failed to delete dreams' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–Ω–∞
app.post('/processDreamText', async (req, res) => {
    const { text, lang, date } = req.body;
    console.log(`[Server] Initializing dream processing for user: ${req.userId}`);
    if (!text || !date) {
        return res.status(400).json({ error: "–ü–æ–ª—è text –∏ date –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });
    }
    try {
        const dreamDate = date === 'today' ? new Date().toISOString().split('T')[0] : date;
        
        // –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç—É—é" –∑–∞–ø–∏—Å—å —Å–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        const newDreamEntry = {
            id: uuidv4(),
            date: dreamDate,
            originalText: text,
            title: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket
            snapshotSummary: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket
            lenses: {}, // –õ–∏–Ω–∑—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
            activeLens: null
        };
        
        await db.saveDream(req.userId, newDreamEntry);
        console.log(`[Server] ‚úÖ Dream shell created with ID: ${newDreamEntry.id}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É ID –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ WebSocket
        res.status(202).json({ dreamId: newDreamEntry.id });
        
    } catch (error) {
        console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ "–ø—É—Å—Ç–æ–π" –∑–∞–ø–∏—Å–∏ —Å–Ω–∞:', error);
        res.status(500).json({ error: error.message });
    }
});

wss.on('connection', (ws, req) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è,
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ URL
    console.log('[WebSocket] ‚úÖ Client connected');

    ws.on('message', async (message) => {
        try {
            const data = JSON.parse(message);
            console.log('[WebSocket] Received message:', data);

            if (data.type === 'startInterpretation') {
                const { dreamId, userId, lang } = data.payload;

                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–Ω –∏–∑ –ë–î
                const dream = await db.getDreamById(userId, dreamId);
                if (!dream) {
                    ws.send(JSON.stringify({ type: 'error', payload: { message: 'Dream not found' } }));
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userProfile = await db.getProfile(userId);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ
                const tarotSpread = generateTarotSpread();

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Å—Ç—Ä–æ-–¥–∞–Ω–Ω—ã–µ
                let astrologyCalculations = null;
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ natalChart —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                if (userProfile?.natalChart && Object.keys(userProfile.natalChart).length > 0) {
                    const dreamDate = dream.date;
                    const [dreamAtmosphere, topTransits, cosmicPassport] = await Promise.all([
                        getDreamAtmosphere(dreamDate),
                        calculateTopTransits(userProfile.natalChart, dreamDate),
                        getCosmicPassport(userProfile.natalChart)
                    ]);
                    astrologyCalculations = { dreamAtmosphere, topTransits, cosmicPassport };
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                await getDreamInterpretationStream(ws, dream.originalText, lang, userProfile, tarotSpread, astrologyCalculations, userId, dreamId);
            }
        } catch (error) {
            console.error('[WebSocket] Error processing message:', error);
            ws.send(JSON.stringify({ type: 'error', payload: { message: 'Internal server error' } }));
        }
    });

    ws.on('close', () => {
        console.log('[WebSocket] ‚ùå Client disconnected');
    });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏–Ω–∑—ã
app.put('/dreams/:dreamId/lenses/astrology', async (req, res) => {
    const { dreamId } = req.params;
    const stateUpdate = req.body; // { viewedInsights, isSummaryUnlocked, currentIndex }
    
    try {
        const updatedLens = await db.updateLensState(req.userId, dreamId, 'astrology', stateUpdate);
        res.status(200).json(updatedLens);
    } catch (error) {
        console.error(`Error updating astrology lens state for dream ${dreamId}:`, error);
        if (error.message.includes("not found")) {
            return res.status(404).json({ error: 'Dream not found' });
        }
        res.status(500).json({ error: 'Failed to update lens state' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏–Ω–∑—ã –¢–∞—Ä–æ (—Ä–∞—Å–∫—Ä—ã—Ç—ã –ª–∏ –∫–∞—Ä—Ç—ã)
app.put('/dreams/:dreamId/lenses/tarot', async (req, res) => {
    const { dreamId } = req.params;
    const { isRevealed } = req.body;

    try {
        const updatedLens = await db.updateLensState(req.userId, dreamId, 'tarot', { isRevealed });
        res.status(200).json(updatedLens);
    } catch (error) {
        console.error(`Error updating tarot lens state for dream ${dreamId}:`, error);
        if (error.message.includes("not found")) {
            return res.status(404).json({ error: 'Dream not found' });
        }
        res.status(500).json({ error: 'Failed to update lens state' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏–Ω–∑—ã –¥–ª—è —Å–Ω–∞
app.put('/dreams/:dreamId/activeLens', async (req, res) => {
    const { dreamId } = req.params;
    const { activeLens } = req.body;
    if (activeLens !== null && typeof activeLens !== 'string') {
        return res.status(400).json({ error: 'activeLens must be a string or null' });
    }

    try {
        await db.updateActiveLens(req.userId, dreamId, activeLens);
        res.status(200).json({ activeLens });
    } catch (error) {
        console.error(`Error updating active lens for dream ${dreamId}:`, error);
        res.status(500).json({ error: 'Failed to update active lens' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ (–∑–∞–≥–ª—É—à–∫–∞)
app.post('/processDreamAudio', (req, res) => {
    res.status(501).json({ message: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞" });
});

server.listen(PORT, () => {
  console.log(`‚ú® –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// –ò–º–ø–æ—Ä—Ç ai_provider –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
import { getDreamInterpretationStream } from './services/ai_provider.js';
