import { 
    getPsychoanalyticInterpretation, 
    getTarotInterpretation, 
    getAstrologyInterpretation,
    getDreambookInterpretation
} from './openai.js';
import { getDreamInterpretation as getDeepSeekInterpretation } from './deepseek.js';
import fs from 'fs';
import path from 'path';
import * as db from './database.js';

// This function is kept for historical/compatibility reasons and should be deprecated.
export const getDreamInterpretation = async (dreamText, lang, userProfile, tarotSpread, astrologyData) => {
    const useOpenAI = process.env.USE_OPENAI === 'true';
    if (useOpenAI) {
        throw new Error("Monolithic interpretation is deprecated. Use streaming.");
    } else {
        console.log('üß† Routing to DeepSeek service...');
        return getDeepSeekInterpretation(dreamText, lang, userProfile, tarotSpread, astrologyData);
    }
};

const simulateDelay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

export const getDreamInterpretationStream = async (ws, dreamText, lang, userProfile, tarotSpread, astrologyData, userId, dreamId) => {
    console.log(`[AI-DIAGNOSTIC] Starting interpretation stream for dreamId: ${dreamId}`);
    
    const onDataPart = async (data) => {
        if (ws.readyState !== 1) { // 1 === OPEN
            console.log('[STREAM] WebSocket is not open. Aborting data send.');
            return;
        }
        try {
            // –£–ë–ò–†–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–î –û–¢–°–Æ–î–ê. –û–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —è–≤–Ω–æ.
            // if (data.type === 'part') {
            //     await db.updateDreamPartial(userId, dreamId, data.payload);
            // }
            ws.send(JSON.stringify(data));
        } catch(e) {
            console.error('[STREAM] Error sending data part:', e);
            // Consider closing the connection or sending an error to the client
        }
    };

    const useMockAI = process.env.USE_MOCK_AI === 'true';

    if (useMockAI) {
        console.log('üé≠ Using mock AI data for streaming...');
        const mockInterpretation = await getMockInterpretation(dreamText, lang, userProfile, tarotSpread, astrologyData);
        
        // --- –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –º–æ–∫ —Ü–µ–ª–∏–∫–æ–º –≤ –ë–î –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ---
        try {
            const { id, date, originalText, ...interpretationToSave } = mockInterpretation;
            await db.updateDreamPartial(userId, dreamId, interpretationToSave);
            console.log(`[STREAM] ‚úÖ Mock interpretation data saved to DB for dream ID: ${dreamId}`);
        } catch (dbError) {
            console.error(`[STREAM] ‚ùå Failed to save mock data to DB for dream ID: ${dreamId}`, dbError);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            await onDataPart({ type: 'error', payload: { message: 'Failed to save mock interpretation to database.' } });
            return;
        }

        // The first request now returns title, processedText, and the dreambook lens.
        await simulateDelay(1500);
        await onDataPart({ type: 'part', payload: { 
            title: mockInterpretation.title, 
            processedText: mockInterpretation.processedText,
            lenses: { dreambook: mockInterpretation.lenses.dreambook } 
        }});
        console.log('[STREAM] Sent Dreambook data + initial payload.');

        await simulateDelay(2000);
        const psychoanalyticData = { lenses: { psychoanalytic: mockInterpretation.lenses.psychoanalytic } };
        // –≠—Ç–∏ –≤—ã–∑–æ–≤—ã –Ω–µ –Ω—É–∂–Ω—ã, —Ç.–∫. –º—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Ü–µ–ª–∏–∫–æ–º –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.
        // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –≤–µ—Å—å –æ–±—ä–µ–∫—Ç lenses, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –ª–∏–Ω–∑—É.
        // await db.updateDreamPartial(userId, dreamId, psychoanalyticData);
        await onDataPart({ type: 'part', payload: psychoanalyticData });
        console.log('[STREAM] Sent Psychoanalytic data.');

        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ 3-–π —à–∞–≥)
        if (mockInterpretation.lenses.astrology) {
            await simulateDelay(2000);
            const astrologyDataPayload = { lenses: { astrology: mockInterpretation.lenses.astrology } };
            // await db.updateDreamPartial(userId, dreamId, astrologyDataPayload);
            await onDataPart({ type: 'part', payload: astrologyDataPayload });
            console.log('[STREAM] Sent Astrology data.');
        }

        await simulateDelay(2000);
        const tarotData = { lenses: { tarot: mockInterpretation.lenses.tarot } };
        // await db.updateDreamPartial(userId, dreamId, tarotData);
        await onDataPart({ type: 'part', payload: tarotData });
        console.log('[STREAM] Sent Tarot data.');

        await simulateDelay(500);
        await onDataPart({ type: 'done' });
        console.log('[STREAM] All parts sent.');
        return;
    }

    try {
        console.log('[AI-DIAGNOSTIC] Starting ALL interpretation requests in parallel.');

        const interpretationPromises = [];

        // --- 1. Dreambook ---
        interpretationPromises.push((async () => {
            try {
                console.log('[STREAM] Getting Dreambook interpretation...');
                const { getDreamAtmosphere } = await import('./astrology.js');
                const dreamAtmosphere = await getDreamAtmosphere(userProfile.birthDate || new Date().toISOString().split('T')[0]);
                const dream = await db.getDreamById(userId, dreamId);
                const dreamDate = dream?.date || new Date().toISOString().split('T')[0];
                const userGender = userProfile.gender || 'male';
                
                const dreambookData = await getDreambookInterpretation(dreamText, dreamAtmosphere, dreamDate, userGender, lang);
                await db.updateDreamPartial(userId, dreamId, dreambookData);
                await onDataPart({ type: 'part', payload: dreambookData });
                console.log('[STREAM] ‚úÖ Sent Dreambook data.');
            } catch (e) {
                console.error('‚ùå Failed to process Dreambook lens:', e.message);
            }
        })());

        // --- 2. Psychoanalysis ---
        interpretationPromises.push((async () => {
            try {
                console.log('[STREAM] Getting Psychoanalytic data...');
                const psychoanalyticData = await getPsychoanalyticInterpretation(dreamText, lang);
                await db.updateDreamPartial(userId, dreamId, psychoanalyticData);
                await onDataPart({ type: 'part', payload: psychoanalyticData });
                console.log('[STREAM] ‚úÖ Sent Psychoanalytic data.');
            } catch (e) {
                console.error('‚ùå Failed to process Psychoanalytic lens:', e.message);
            }
        })());

        // --- 3. Astrology (only if data is available) ---
        if (astrologyData) {
            interpretationPromises.push((async () => {
                try {
                    console.log('[STREAM] Getting Astrology data...');
                    const astrologyDataResult = await getAstrologyInterpretation(dreamText, astrologyData, lang);
                    await db.updateDreamPartial(userId, dreamId, astrologyDataResult);
                    await onDataPart({ type: 'part', payload: astrologyDataResult });
                    console.log('[STREAM] ‚úÖ Sent Astrology data.');
                } catch (e) {
                    console.error('‚ùå Failed to process Astrology lens:', e.message);
                }
            })());
        } else {
            console.log('[STREAM] ‚è≠Ô∏è Skipping Astrology data: No natal chart data provided.');
        }

        // --- 4. Tarot ---
        interpretationPromises.push((async () => {
            try {
                console.log('[STREAM] Getting Tarot data...');
                const tarotData = await getTarotInterpretation(dreamText, tarotSpread, lang);
                await db.updateDreamPartial(userId, dreamId, tarotData);
                await onDataPart({ type: 'part', payload: tarotData });
                console.log('[STREAM] ‚úÖ Sent Tarot data.');
            } catch (e) {
                console.error('‚ùå Failed to process Tarot lens:', e.message);
            }
        })());
        
        // Wait for all interpretations to finish
        await Promise.allSettled(interpretationPromises);

        await onDataPart({ type: 'done' });
        console.log('[AI-DIAGNOSTIC] All interpretation streams finished.');

    } catch (error) {
        console.error('‚ùå Error during interpretation stream:', error);
        await onDataPart({ type: 'error', payload: { message: error.message } });
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ mock –¥–∞–Ω–Ω—ã—Ö
const getMockInterpretation = async (dreamText, lang, userProfile, tarotSpread, astrologyData) => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    const mockPath = path.join(process.cwd(), 'mock-interpretation.json');
    const mockData = JSON.parse(fs.readFileSync(mockPath, 'utf-8'));
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è dreambook (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ)
    const { getDreamAtmosphere } = await import('./astrology.js');
    const dreamDate = new Date().toISOString().split('T')[0];
    const dreamAtmosphere = await getDreamAtmosphere(dreamDate);
    const weekdayIndex = new Date(dreamDate).getDay();
    const WEEKDAY_NAMES_RU = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const weekdayName = WEEKDAY_NAMES_RU[weekdayIndex];
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    const adaptedMockData = {
      ...mockData,
      title: `Mock: ${dreamText.substring(0, 30)}...`,
      processedText: mockData.processedText || `–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–Ω–∞: ${dreamText}`,
      snapshotSummary: null, // –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º summary
      lenses: {
        ...mockData.lenses,
        dreambook: {
          ...mockData.lenses.dreambook,
          metadata: {
            moonPhase: dreamAtmosphere.moonPhase.name,
            moonSign: dreamAtmosphere.moonSign.name,
            moonEmoji: dreamAtmosphere.moonSign.emoji,
            weekday: weekdayName,
            date: dreamDate
          }
        }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–Ω–Ω–∏–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        tarot: {
          title: "–¢–∞—Ä–æ",
          spread: tarotSpread.map((card, index) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–∑ –º–æ–∫-—Ñ–∞–π–ª–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç—ã
            const mockInterpretation = mockData.lenses.tarot.spread[index];
            return {
              position: card.position,
              cardName: card.cardName,
              interpretation: mockInterpretation.interpretation.replace(/<<cardName>>/g, card.cardName)
            };
          }),
          summary: mockData.lenses.tarot.summary,
          state: { isRevealed: false }
        }
      }
    };

    console.log('üé≠ Mock interpretation generated successfully');
    return adaptedMockData;
    
  } catch (error) {
    console.error('‚ùå Error loading mock data:', error);
    
    // Fallback mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    return {
      title: "Mock Dream Analysis",
      snapshotSummary: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI.",
      lenses: {
        psychoanalytic: {
          title: "–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑",
          insights: [
            { name: "Mock Insight 1", description: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI." },
            { name: "Mock Insight 2", description: "–í—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ." }
          ],
          schools: {
            freud: { title: "–ü–æ –§—Ä–µ–π–¥—É", content: "Mock –∞–Ω–∞–ª–∏–∑ –ø–æ –§—Ä–µ–π–¥—É." },
            jung: { title: "–ü–æ –Æ–Ω–≥—É", content: "Mock –∞–Ω–∞–ª–∏–∑ –ø–æ –Æ–Ω–≥—É." },
            adler: { title: "–ü–æ –ê–¥–ª–µ—Ä—É", content: "Mock –∞–Ω–∞–ª–∏–∑ –ø–æ –ê–¥–ª–µ—Ä—É." }
          },
          recommendation: {
            title: "Mock –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            content: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI."
          }
        },
        tarot: {
          title: "–¢–∞—Ä–æ",
          spread: tarotSpread.map((card, index) => ({
            position: card.position,
            cardName: card.cardName,
            interpretation: `Fallback –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ${card.cardName} –≤ –ø–æ–∑–∏—Ü–∏–∏ ${card.position}`
          })),
          summary: "Fallback –æ–±—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥–∞.",
          state: { isRevealed: false }
        },
        astrology: {
          title: "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", 
          summary: "Mock –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞."
        }
      }
    };
  }
};
