import { getDreamInterpretation as getOpenAIInterpretation } from './openai.js';
import { getDreamInterpretation as getDeepSeekInterpretation } from './deepseek.js';
import fs from 'fs';
import path from 'path';

// This function acts as a switchboard, choosing the AI provider based on the .env config.
// The `server.js` file will call this function, remaining unaware of the specific provider being used.
export const getDreamInterpretation = async (dreamText, lang, userProfile, tarotSpread, astrologyData) => {
  const useMockApi = process.env.USE_MOCK_API === 'true';
  const useOpenAI = process.env.USE_OPENAI === 'true';

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω mock —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (useMockApi) {
    console.log('üé≠ Using mock AI data (no API calls)');
    return getMockInterpretation(dreamText, lang, userProfile, tarotSpread, astrologyData);
  }

  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ AI API
  if (useOpenAI) {
    console.log('ü§ñ Routing to OpenAI service...');
    return getOpenAIInterpretation(dreamText, lang, userProfile, tarotSpread, astrologyData);
  } else {
    console.log('üß† Routing to DeepSeek service...');
    return getDeepSeekInterpretation(dreamText, lang, userProfile, tarotSpread, astrologyData);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ mock –¥–∞–Ω–Ω—ã—Ö
const getMockInterpretation = async (dreamText, lang, userProfile, tarotSpread, astrologyData) => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    const mockPath = path.join(process.cwd(), 'mock-interpretation.json');
    const mockData = JSON.parse(fs.readFileSync(mockPath, 'utf-8'));
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    const adaptedMockData = {
      ...mockData,
      title: `Mock: ${dreamText.substring(0, 30)}...`,
      snapshotSummary: `–≠—Ç–æ mock –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI. –ù–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞: "${dreamText.substring(0, 50)}..."`
    };

    console.log('üé≠ Mock interpretation generated successfully');
    return adaptedMockData;
    
  } catch (error) {
    console.error('‚ùå Error loading mock data:', error);
    
    // Fallback mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    return {
      title: "Mock Dream Analysis",
      snapshotSummary: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI.",
      lenses: {
        psychoanalytic: {
          title: "–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑",
          insights: [
            { name: "Mock Insight 1", description: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI." },
            { name: "Mock Insight 2", description: "–í—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ." }
          ],
          schools: {
            freud: { title: "–ü–æ –§—Ä–µ–π–¥—É", content: "Mock –∞–Ω–∞–ª–∏–∑ –ø–æ –§—Ä–µ–π–¥—É." },
            jung: { title: "–ü–æ –Æ–Ω–≥—É", content: "Mock –∞–Ω–∞–ª–∏–∑ –ø–æ –Æ–Ω–≥—É." },
            adler: { title: "–ü–æ –ê–¥–ª–µ—Ä—É", content: "Mock –∞–Ω–∞–ª–∏–∑ –ø–æ –ê–¥–ª–µ—Ä—É." }
          },
          recommendation: {
            title: "Mock –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            content: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI."
          }
        },
        tarot: {
          title: "–¢–∞—Ä–æ",
          spread: tarotSpread.map((card, index) => ({
            ...card,
            interpretation: `Mock –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ${card.name} –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}`
          })),
          summary: "Mock –æ–±—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥–∞.",
          state: { isRevealed: false }
        },
        astrology: {
          title: "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", 
          summary: "Mock –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞."
        },
        culturology: {
          title: "–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è",
          summary: "Mock –∫—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞."
        }
      }
    };
  }
};
