import { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ProfileProvider } from './context/ProfileContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
import { LocalizationProvider } from './context/LocalizationContext';
import WelcomePage from './pages/WelcomePage';
import RecordingPage from './pages/RecordingPage';
import InterpretationPage from './pages/InterpretationPage';
import HistoryPage from './pages/HistoryPage';
import ProfilePage from './pages/ProfilePage';
import SettingsPage from './pages/SettingsPage';
import LanguagePage from './pages/LanguagePage';
import PrivateRoute from './components/PrivateRoute';
import { getProfile, api } from './services/api';
import i18n from './services/i18n'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π i18n
import Placeholder from './components/Placeholder';
import React from 'react'; // Added missing import for React
import { detectTelegramEnvironment, initializeTelegramWebApp, isValidProductionEnvironment } from './utils/telegramDetection.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error: error.message };
  }

  componentDidCatch(error, errorInfo) {
    console.error('[ErrorBoundary] React error caught:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <Placeholder error={this.state.error} />;
    }

    return this.props.children;
  }
}

// –°–æ–∑–¥–∞–µ–º I18nContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ i18n —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
// –≠—Ç–æ –∑–∞–º–µ–Ω–∞ I18nextProvider, –∫–æ—Ç–æ—Ä—É—é —è –æ—à–∏–±–æ—á–Ω–æ –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
export const I18nContext = React.createContext(i18n);


function App() {
  const [view, setView] = useState('loading'); // 'loading', 'app', 'placeholder'
  const [i18nInstance, setI18nInstance] = useState(i18n);
  const [error, setError] = useState(null);
  const [debugInfo, setDebugInfo] = useState({});

  useEffect(() => {
    const isDev = import.meta.env.DEV;
    let detectionAttempts = 0;
    const maxDetectionAttempts = 40; // 40 * 50ms = 2 seconds timeout

    const initializeApp = () => {
      detectionAttempts++;
      console.log(`[App] üöÄ Initialization attempt #${detectionAttempts}`);

      // –£—Å–ª–æ–≤–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –∂–¥–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ WebApp.
      // –ü–æ–ª–µ initData –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è —á—É—Ç—å –ø–æ–∑–∂–µ.
      if (window.Telegram && window.Telegram.WebApp) {
        console.log('[App] ‚úÖ Telegram WebApp object is available.');
        
        // –î–æ–±–∞–≤–∏–º –º–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã initData —É—Å–ø–µ–ª –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
        setTimeout(() => {
            try {
              const telegramEnv = detectTelegramEnvironment();
              
              console.log('[App] üîç Detection result:', {
                isTelegram: telegramEnv.isTelegram,
                method: telegramEnv.method,
                hasInitData: !!telegramEnv.initData,
                initDataLength: telegramEnv.initData?.length || 0,
                user: telegramEnv.user,
              });
    
              setDebugInfo(telegramEnv.debugInfo);
    
              if (telegramEnv.isTelegram) {
                if (telegramEnv.webApp) {
                  initializeTelegramWebApp(telegramEnv);
                }
                setView('app');
              } else {
                 console.warn('[App] ‚ö†Ô∏è Detected as non-Telegram environment inside the main check.');
                 setView('placeholder');
              }
            } catch (err) {
                console.error('[App] üí• Error during initialization:', err);
                setError(err.message);
                setDebugInfo(prev => ({ ...prev, error: err.message }));
                setView('placeholder');
            }
        }, 50); // 50ms –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

      } else if (detectionAttempts < maxDetectionAttempts) {
        // –ï—Å–ª–∏ API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 50 –º—Å
        setTimeout(initializeApp, 50);
      } else {
        // Timeout: API –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        console.log('[App] ‚ùå Telegram WebApp API not found after 2 seconds.');
        setDebugInfo(prev => ({
            ...prev,
            timeout: true,
            isDev,
            finalCheck: {
                hasTelegram: !!window.Telegram,
                hasWebApp: !!window.Telegram?.WebApp,
                hasInitData: window.Telegram?.WebApp?.initData !== undefined,
            }
        }));

        if (isDev) {
          console.log('[App] üîß Development mode - bypassing Telegram check.');
          setView('app');
        } else {
          console.log('[App]  Showing placeholder.');
          setView('placeholder');
        }
      }
    };

    initializeApp();
    
    // –ú—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º cleanup-—Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å polling
  }, []);

  if (view === 'loading') {
    return null; 
  }

  if (view === 'placeholder') {
    return (
      <I18nContext.Provider value={i18nInstance}>
        <Placeholder error={error} debugInfo={debugInfo} />
      </I18nContext.Provider>
    );
  }

  return (
    <ErrorBoundary>
      <I18nContext.Provider value={i18nInstance}>
        <LocalizationProvider>
          <ProfileProvider>
            <Router>
              <Routes>
                <Route path="/welcome" element={<WelcomePage />} />
                <Route path="/language" element={<LanguagePage />} />
                <Route path="/" element={<PrivateRoute />}>
                  <Route index element={<Navigate to="/record" />} />
                  <Route path="record" element={<RecordingPage />} />
                  <Route path="interpretation/:id" element={<InterpretationPage />} />
                  <Route path="history" element={<HistoryPage />} />
                  <Route path="profile" element={<ProfilePage />} />
                  <Route path="settings" element={<SettingsPage />} />
                </Route>
              </Routes>
            </Router>
          </ProfileProvider>
        </LocalizationProvider>
      </I18nContext.Provider>
    </ErrorBoundary>
  );
}

export default App;