import { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ProfileProvider } from './context/ProfileContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
import { LocalizationProvider } from './context/LocalizationContext';
import WelcomePage from './pages/WelcomePage';
import RecordingPage from './pages/RecordingPage';
import InterpretationPage from './pages/InterpretationPage';
import HistoryPage from './pages/HistoryPage';
import ProfilePage from './pages/ProfilePage';
import SettingsPage from './pages/SettingsPage';
import LanguagePage from './pages/LanguagePage';
import PrivateRoute from './components/PrivateRoute';
import { getProfile, api } from './services/api';
import i18n from './services/i18n'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π i18n
import Placeholder from './components/Placeholder';
import React from 'react'; // Added missing import for React
import { detectTelegramEnvironment, initializeTelegramWebApp, isValidProductionEnvironment } from './utils/telegramDetection.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error: error.message };
  }

  componentDidCatch(error, errorInfo) {
    console.error('[ErrorBoundary] React error caught:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <Placeholder error={this.state.error} />;
    }

    return this.props.children;
  }
}

// –°–æ–∑–¥–∞–µ–º I18nContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ i18n —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
// –≠—Ç–æ –∑–∞–º–µ–Ω–∞ I18nextProvider, –∫–æ—Ç–æ—Ä—É—é —è –æ—à–∏–±–æ—á–Ω–æ –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
export const I18nContext = React.createContext(i18n);


function App() {
  const [view, setView] = useState('loading'); // 'loading', 'app', 'placeholder'
  const [i18nInstance, setI18nInstance] = useState(i18n);
  const [error, setError] = useState(null);
  const [debugInfo, setDebugInfo] = useState({});

  useEffect(() => {
    const isDev = import.meta.env.DEV;
    const tg = window.Telegram?.WebApp;

    const initializeApp = () => {
      console.log('[App] ‚úÖ initializeApp function called.');
      if (!tg) {
        console.log('[App] ‚ùå Telegram WebApp object not found.');
        if (!isDev) {
          setView('placeholder');
        } else {
          console.log('[App] üîß Development mode, showing app.');
          setView('app');
        }
        return;
      }
      
      console.log('[App] ‚ú® Telegram WebApp object found. Initializing now.');
      // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º ready(), —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ.
      tg.ready();
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
      initializeTelegramWebApp({ webApp: tg, isTelegram: true });
      
      setView('app');
    };

    // –í–µ—à–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ `viewportChanged`. 
    // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–¥–µ–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp.
    // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    const onViewportChanged = () => {
        console.log('[App] üì¢ viewportChanged event fired. Initializing app.');
        // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        tg.offEvent('viewportChanged', onViewportChanged);
        initializeApp();
    };

    if (tg && tg.initData) {
        // –ï—Å–ª–∏ WebApp —É–∂–µ –≥–æ—Ç–æ–≤–æ –∫ –º–æ–º–µ–Ω—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, 
        // –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.
        console.log('[App] üöÄ WebApp is already available. Initializing immediately.');
        initializeApp();
    } else if (tg) {
        // –ï—Å–ª–∏ WebApp –µ—Å—Ç—å, –Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ,
        // –º—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ viewportChanged.
        console.log('[App] ‚è≥ WebApp is available, but might be initializing. Setting up viewportChanged listener.');
        tg.onEvent('viewportChanged', onViewportChanged);
    } else {
        // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç–∞ tg –Ω–µ—Ç –≤–æ–æ–±—â–µ, –∑–Ω–∞—á–∏—Ç –º—ã —Ç–æ—á–Ω–æ –Ω–µ –≤ Telegram.
        console.log('[App] ‚ùå Not in a Telegram environment.');
        if (!isDev) {
          setView('placeholder');
        } else {
          setView('app');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (tg) {
        tg.offEvent('viewportChanged', onViewportChanged);
      }
    };
  }, []);

  if (view === 'loading') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ null
    return (
      <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white' }}>
        –ó–∞–≥—Ä—É–∑–∫–∞...
      </div>
    );
  }

  if (view === 'placeholder') {
    return (
      <I18nContext.Provider value={i18nInstance}>
        <Placeholder error={error} debugInfo={debugInfo} />
      </I18nContext.Provider>
    );
  }

  return (
    <ErrorBoundary>
      <I18nContext.Provider value={i18nInstance}>
        <LocalizationProvider>
          <ProfileProvider>
            <Router>
              <Routes>
                <Route path="/welcome" element={<WelcomePage />} />
                <Route path="/language" element={<LanguagePage />} />
                <Route path="/" element={<PrivateRoute />}>
                  <Route index element={<Navigate to="/record" />} />
                  <Route path="record" element={<RecordingPage />} />
                  <Route path="interpretation/:id" element={<InterpretationPage />} />
                  <Route path="history" element={<HistoryPage />} />
                  <Route path="profile" element={<ProfilePage />} />
                  <Route path="settings" element={<SettingsPage />} />
                </Route>
              </Routes>
            </Router>
          </ProfileProvider>
        </LocalizationProvider>
      </I18nContext.Provider>
    </ErrorBoundary>
  );
}

export default App;