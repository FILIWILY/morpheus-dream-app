import React, { useState, useEffect, useRef, useLayoutEffect } from 'react';
import styles from './AstrologyLens.module.css';
import ReactMarkdown from 'react-markdown';
import { Swiper, SwiperSlide } from 'swiper/react';
import 'swiper/css';
import 'swiper/css/effect-coverflow';
import { EffectCoverflow } from 'swiper/modules';
import api from '../services/api';


// --- –ò–∫–æ–Ω–∫–∏ ---

const planetIcons = {
    sun: '‚òâ', moon: '‚òΩ', mercury: '‚òø', venus: '‚ôÄ', mars: '‚ôÇ', jupiter: '‚ôÉ', saturn: '‚ôÑ', uranus: '‚ôÖ', neptune: '‚ôÜ', pluto: '‚ôá',
};
const aspectIcons = {
    conjunction: '‚òå', opposition: '‚òç', square: '‚ñ°', trine: '‚ñ≥', sextile: '‚öπ',
};
const QuestionMarkIcon = () => ( <span style={{cursor: 'pointer', color: '#888'}}>?</span> );

import NewMoonIcon from '../assets/moon_phases/new_moon.png';
import WaxingCrescentIcon from '../assets/moon_phases/waxing_crescent.png';
import FirstQuarterIcon from '../assets/moon_phases/first_quarter.png';
import WaxingGibbousIcon from '../assets/moon_phases/waxing_gibbous.png';
import FullMoonIcon from '../assets/moon_phases/full_moon.png';
import WaningGibbousIcon from '../assets/moon_phases/waning_gibbous.png';
import LastQuarterIcon from '../assets/moon_phases/last_quarter.png';
import WaningCrescentIcon from '../assets/moon_phases/waning_crescent.png';

const moonPhaseIcons = {
    new_moon: NewMoonIcon, waxing_crescent: WaxingCrescentIcon, first_quarter: FirstQuarterIcon, waxing_gibbous: WaxingGibbousIcon, full_moon: FullMoonIcon, waning_gibbous: WaningGibbousIcon, last_quarter: LastQuarterIcon, waning_crescent: WaningCrescentIcon,
};


// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---

const Tooltip = ({ text }) => ( <div className={styles.tooltip}>{text}</div> );

const HelpIcon = ({ tooltipText }) => {
    const [isTooltipVisible, setTooltipVisible] = useState(false);
    return (
        <div 
            className={styles.helpIconContainer}
            onMouseEnter={() => setTooltipVisible(true)}
            onMouseLeave={() => setTooltipVisible(false)}
        >
            <QuestionMarkIcon />
            {isTooltipVisible && <Tooltip text={tooltipText} />}
        </div>
    );
};


const InsightPoint = () => {
    const pointStyle = {
        backgroundColor: 'var(--lens-accent-color)',
        boxShadow: `0 0 8px 1px var(--lens-accent-color)`,
    };
    return <div className={styles.insightPoint} style={pointStyle}></div>;
};

const AstrologyLens = ({ data, dreamId, onStateChange }) => {
    if (!data || (!data.celestialMap && !data.topTransits && !data.error)) {
        return <div className={styles.astrologyLens}><p>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.</p></div>;
    }
    if (data.error) {
        return <div className={styles.astrologyLens}><p>{data.error}</p></div>;
    }

    const { title, celestialMap, analysis, topTransits, explanation, cosmicPassport } = data;

    const handleStateUpdate = async (newState) => {
        if (!dreamId) return;
        try {
            const response = await api.put(`/dreams/${dreamId}/lenses/astrology`, {
                viewedInsights: Array.from(newState.viewedInsights),
                isSummaryUnlocked: newState.isSummaryUnlocked,
                currentIndex: newState.currentIndex,
            });
            onStateChange(response.data);
        } catch (error) {
            console.error('Failed to save astrology lens state:', error);
        }
    };



    return (
        <div className={styles.astrologyLens}>
            
            
            {/* –ë–ª–æ–∫ 1: –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –°–Ω–∞ */}
            {celestialMap && (
                <div className={styles.atmosphereBlock}>
                                         <h3 className={styles.blockTitle}>–≠–Ω–µ—Ä–≥–∏—è —Å–Ω–∞</h3>
                    <div className={styles.insightRow}>
                        <img src={moonPhaseIcons[celestialMap.moonPhase.phase]} alt={celestialMap.moonPhase.name} className={styles.iconImage} />
                        <div className={styles.textBlock}>
                            <h4 className={styles.subTitle}>
                                <span className={styles.subTitleLabel}>–§–∞–∑–∞ –õ—É–Ω—ã: </span>
                                <span className={styles.subTitleValue}>{celestialMap.moonPhase.name}</span>
                            </h4>
                            <div className={styles.markdown}>
                                <ReactMarkdown>{celestialMap.moonPhase.text}</ReactMarkdown>
                            </div>
                        </div>
                    </div>
                    <div className={styles.insightRow}>
                        <div className={styles.iconEmoji}>{celestialMap.moonSign.emoji}</div>
                        <div className={styles.textBlock}>
                            <h4 className={styles.subTitle}>
                                <span className={styles.subTitleLabel}>–ó–Ω–∞–∫ –õ—É–Ω—ã: </span>
                                <span className={styles.subTitleValue}>{celestialMap.moonSign.name}</span>
                            </h4>
                            <div className={styles.markdown}>
                                <ReactMarkdown>{celestialMap.moonSign.text}</ReactMarkdown>
                            </div>
                        </div>
                    </div>
                    {cosmicPassport && !cosmicPassport.error && (
                        <div className={styles.passportSection}>
                            <h3 className={styles.blockTitle}>–í–∞—à –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ü–∞—Å–ø–æ—Ä—Ç</h3>
                            <div className={styles.passportGrid}>
                                <div className={styles.insightRow}>
                                    <div className={styles.iconEmoji}>
                                        <span className={styles.celestialIcon}>‚òÄÔ∏è</span>
                                        {cosmicPassport.sun.signEmoji && <span className={styles.zodiacIcon}>{cosmicPassport.sun.signEmoji}</span>}
                                    </div>
                                    <div className={styles.textBlock}>
                                        <h4 className={styles.subTitle}>
                                            <span className={styles.subTitleLabel}>{cosmicPassport.sun.title}: </span>
                                        </h4>
                                        <span className={styles.passportTagline}>{cosmicPassport.sun.tagline}</span>
                                    </div>
                                </div>
                                <div className={styles.insightRow}>
                                     <div className={styles.iconEmoji}>
                                        <span className={styles.celestialIcon}>üåô</span>
                                        {cosmicPassport.moon.signEmoji && <span className={styles.zodiacIcon}>{cosmicPassport.moon.signEmoji}</span>}
                                    </div>
                                    <div className={styles.textBlock}>
                                        <h4 className={styles.subTitle}>
                                            <span className={styles.subTitleLabel}>{cosmicPassport.moon.title}: </span>
                                        </h4>
                                        <span className={styles.passportTagline}>{cosmicPassport.moon.tagline}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                     {analysis && (
                        <div className={styles.analysisSection}>
                             <h3 className={styles.blockTitle}>–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —ç–Ω–µ—Ä–≥–∏–∏ —Å–Ω–∞</h3>
                             {analysis.sections.map((section, index) => (
                                <div key={index} className={styles.insightBlock}>
                                    <h4 className={styles.insightTitle}>{section.title}</h4>
                                    <div className={styles.markdown}>
                                        <ReactMarkdown>{section.content}</ReactMarkdown>
                                    </div>
                                </div>
                             ))}
                        </div>
                     )}
                </div>
            )}

            {/* –ë–ª–æ–∫ 2: –ö–ª—é—á–µ–≤—ã–µ –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –í–ª–∏—è–Ω–∏—è - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø */}
            <PlanetaryInfluence
                data={data}
                topTransits={topTransits}
                explanation={explanation}
                onStateUpdate={handleStateUpdate}
            />
        </div>
    );
};

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
const mockPlanetaryData = {
    insights: [
        {
            title: "–ì—Ä–∞–Ω—å 1: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
            p1: "moon",
            p2: "saturn",
            aspect: "square",
            tagline: "–õ—É–Ω–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ –∫ –°–∞—Ç—É—Ä–Ω—É",
            power: 8,
            interpretation: "–í–∞—à —Å–æ–Ω –æ–∫—Ä–∞—à–µ–Ω –≤–ª–∏—è–Ω–∏–µ–º –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã –õ—É–Ω—ã –∫ –°–∞—Ç—É—Ä–Ω—É. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –¥–æ–ª–≥—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ —ç–º–æ—Ü–∏–∏ –º–µ—à–∞—é—Ç –≤–∞–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏.",
            lesson: "–£—Ä–æ–∫ —ç—Ç–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ ‚Äî –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∑–∞–±–æ—Ç–æ–π –æ —Å–µ–±–µ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é. –ù–µ –ø–æ–¥–∞–≤–ª—è–π—Ç–µ —á—É–≤—Å—Ç–≤–∞, –∞ –ø—Ä–∏–∑–Ω–∞–π—Ç–µ –∏—Ö –∏ –¥–∞–π—Ç–µ –∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –≤—ã—Ö–æ–¥.",
            recommendation: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π. –ó–∞–ø–∏—Å—ã–≤–∞—è —Å–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∏—Ö –ø—Ä–∏—Ä–æ–¥—É –∏ —Å–Ω–∏–∑–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ."
        },
        {
            title: "–ì—Ä–∞–Ω—å 2: –ü—Ä–æ–∑—Ä–µ–Ω–∏–µ –∏ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
            p1: "sun",
            p2: "pluto",
            aspect: "trine",
            tagline: "–°–æ–ª–Ω—Ü–µ –≤ —Ç—Ä–∏–Ω–µ –∫ –ü–ª—É—Ç–æ–Ω—É",
            power: 9,
            interpretation: "–¢—Ä–∏–Ω –°–æ–ª–Ω—Ü–∞ –∫ –ü–ª—É—Ç–æ–Ω—É —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–æ—â–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –ø—Ä–æ–∑—Ä–µ–Ω–∏–π. –í–∞—à —Å–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á–æ–º –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–∫—Ä—ã—Ç—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
            lesson: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –°–µ–π—á–∞—Å –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–¥—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞, –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –¥–ª—è —Ä–æ—Å—Ç–∞.",
            recommendation: "–ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º: '–ß—Ç–æ —è –≥–æ—Ç–æ–≤(–∞) –æ—Ç–ø—É—Å—Ç–∏—Ç—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ?' –û—Ç–≤–µ—Ç, –ø—Ä–∏—à–µ–¥—à–∏–π –≤–æ —Å–Ω–µ –∏–ª–∏ –≤ –º—ã—Å–ª—è—Ö, –±—É–¥–µ—Ç –≤–∞—à–∏–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–º."
        },
        {
            title: "–ì—Ä–∞–Ω—å 3: –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ì–∞—Ä–º–æ–Ω–∏—è",
            p1: "venus",
            p2: "jupiter",
            aspect: "sextile",
            tagline: "–í–µ–Ω–µ—Ä–∞ –≤ —Å–µ–∫—Å—Ç–∏–ª–µ –∫ –Æ–ø–∏—Ç–µ—Ä—É",
            power: 7,
            interpretation: "–°–µ–∫—Å—Ç–∏–ª—å –í–µ–Ω–µ—Ä—ã –∫ –Æ–ø–∏—Ç–µ—Ä—É –Ω–∞–ø–æ–ª–Ω—è–µ—Ç —Å–æ–Ω –æ—â—É—â–µ–Ω–∏–µ–º –ª–µ–≥–∫–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–º–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö. –≠—Ç–æ –∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            lesson: "–ù–∞—É—á–∏—Ç–µ—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞—Ä—ã –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –ª—é–¥–µ–π —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é. –í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ –¥—Ä—É–∂–µ–ª—é–±–∏–µ –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—Ç —É–¥–∞—á—É.",
            recommendation: "–ù–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –î–∞–∂–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –ø–æ–ª—å–∑—É."
        }
    ],
    summary: {
        title: "–û–±—â–∏–π –°–æ–≤–µ—Ç –ê—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        content: "–°–ª–æ–∂–∏–≤ –≤—Å–µ –≥—Ä–∞–Ω–∏ –≤–æ–µ–¥–∏–Ω–æ, –≤–∞—à —Å–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ –ø–µ—Ä–∏–æ–¥–µ –≤–∞–∂–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞. –° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –≤—ã –æ—â—É—â–∞–µ—Ç–µ –≥—Ä—É–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–õ—É–Ω–∞-–°–∞—Ç—É—Ä–Ω), –Ω–æ —Å –¥—Ä—É–≥–æ–π ‚Äî —É –≤–∞—Å –µ—Å—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–°–æ–ª–Ω—Ü–µ-–ü–ª—É—Ç–æ–Ω) –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è (–í–µ–Ω–µ—Ä–∞-–Æ–ø–∏—Ç–µ—Ä). **–ö–ª—é—á –∫ —É—Å–ø–µ—Ö—É** ‚Äî –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –∫–∞–∫ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ä–æ—Å—Ç–∞. –ü—Ä–∏–Ω—è–≤ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ª—é–±—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–µ—Å—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é."
    }
};


const CrystalIcon = ({ isFilled }) => (
    <svg width="40" height="60" viewBox="0 0 50 70" className={`${styles.crystalIcon} ${isFilled ? styles.filled : ''}`}>
        <defs>
            <linearGradient id="crystalGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style={{ stopColor: 'var(--lens-accent-color)', stopOpacity: 0.8 }} />
                <stop offset="100%" style={{ stopColor: 'var(--lens-accent-color)', stopOpacity: 0.2 }} />
            </linearGradient>
            <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
                <feGaussianBlur stdDeviation="3.5" result="coloredBlur" />
                <feMerge>
                    <feMergeNode in="coloredBlur" />
                    <feMergeNode in="SourceGraphic" />
                </feMerge>
            </filter>
        </defs>
        <path 
            d="M25 0 L5 20 L5 50 L25 70 L45 50 L45 20 Z" 
            className={styles.crystalPath}
            strokeWidth="2" 
            stroke="rgba(255,255,255,0.7)"
            fill={isFilled ? "url(#crystalGradient)" : "rgba(255,255,255,0.05)"}
            style={{ filter: isFilled ? 'url(#glow)' : 'none' }}
        />
        <path d="M5 20 L25 25 L45 20 M25 25 L25 70" stroke="rgba(255,255,255,0.3)" strokeWidth="1" fill="none" />
    </svg>
);


const SynthesizingAnimation = () => (
    <div className={styles.synthesizingContainer}>
        <div className={styles.synthesizingText}>
            <p>–°–æ–≤–µ—Ç –æ—Ç –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç—Å—è</p>
            <div className={styles.dots}>
                <span>.</span><span>.</span><span>.</span>
            </div>
        </div>
    </div>
);

const PlanetaryInfluence = ({ data, topTransits, explanation, onStateUpdate }) => {
    
    const { state } = data;
    const [viewedInsights, setViewedInsights] = useState(new Set(state?.viewedInsights || [0]));
    const [isSummaryUnlocked, setIsSummaryUnlocked] = useState(state?.isSummaryUnlocked || false);
    const [animationState, setAnimationState] = useState(state?.isSummaryUnlocked ? 'unlocked' : 'idle'); 
    
    const insights = topTransits?.insights && topTransits.insights.length > 0
        ? topTransits.insights
        : mockPlanetaryData.insights;
        
    const swiperRef = useRef(null);

    useLayoutEffect(() => {
        if (swiperRef.current && insights.length > 0) {
            const swiper = swiperRef.current;
            const slides = swiper.slides;
            if (!slides || slides.length === 0) return;
            let maxHeight = 0;
            slides.forEach(slide => {
                const card = slide.querySelector(`.${styles.transitCard}`);
                if (card) {
                    card.style.height = 'auto';
                    if (card.scrollHeight > maxHeight) {
                        maxHeight = card.scrollHeight;
                    }
                }
            });
            if (maxHeight > 0) {
                slides.forEach(slide => {
                    const card = slide.querySelector(`.${styles.transitCard}`);
                    if (card) {
                        card.style.height = `${maxHeight}px`;
                    }
                });
            }
        }
    }, [insights]);

    useEffect(() => {
        if (viewedInsights.size === insights.length + 1 && animationState === 'idle') {
            setAnimationState('flashing');
        }
    }, [viewedInsights, insights.length, animationState]);
    
    useEffect(() => {
        let timer;
        if (animationState === 'flashing') {
            timer = setTimeout(() => setAnimationState('fading'), 500);
        } else if (animationState === 'fading') {
            timer = setTimeout(() => {
                setAnimationState('synthesizing');
                const newSummaryUnlocked = true;
                setIsSummaryUnlocked(newSummaryUnlocked);
                onStateUpdate({ viewedInsights, isSummaryUnlocked: newSummaryUnlocked });
            }, 500);
        } else if (animationState === 'synthesizing') {
            // Wait for synthesis, then transition to a state where the user can reveal the summary
            timer = setTimeout(() => setAnimationState('readyToUnlock'), 3000);
        }
        return () => clearTimeout(timer);
    }, [animationState, onStateUpdate, viewedInsights]);

    const handleSlideChange = (swiper) => {
        const newViewedInsights = new Set(viewedInsights).add(swiper.activeIndex);
        setViewedInsights(newViewedInsights);
        onStateUpdate({ viewedInsights: newViewedInsights, isSummaryUnlocked, currentIndex: swiper.activeIndex });
    };

    const showCrystals = animationState !== 'synthesizing' && animationState !== 'unlocked' && animationState !== 'readyToUnlock';
    const showFlash = animationState === 'flashing';
    const isFading = animationState === 'fading';
    const isSynthesizing = animationState === 'synthesizing';
    const isReadyToUnlock = animationState === 'readyToUnlock';
    const isUnlocked = animationState === 'unlocked';
    
    return (
        <div className={`${styles.block} ${styles.topTransitsBlock}`}>
            <div className={styles.titleWithTooltip}>
                <h3 className={styles.blockTitle}>–ö–ª—é—á–µ–≤—ã–µ –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –í–ª–∏—è–Ω–∏—è</h3>
                <HelpIcon tooltipText={explanation || "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–∞–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."} />
            </div>

            <div className={styles.swiperContainer}>
            <Swiper
                effect={'coverflow'}
                grabCursor={true}
                centeredSlides={true}
                slidesPerView={'auto'}
                coverflowEffect={{
                    rotate: 50,
                    stretch: 0,
                    depth: 100,
                    modifier: 1,
                    slideShadows: true,
                }}
                modules={[EffectCoverflow]}
                onSwiper={(swiper) => { 
                    swiperRef.current = swiper; 
                    const savedIndex = typeof state?.currentIndex === 'number' ? state.currentIndex : 0;
                    try { swiper.slideTo(savedIndex, 0); } catch (_) {}
                }}
                onSlideChange={handleSlideChange}
                className={styles.mySwiper}
            >
                <SwiperSlide className={styles.swiperSlide}>
                    <div className={`${styles.transitCard} ${styles.placeholderBlock}`}>
                         <div className={styles.placeholderContent}>
                            <p className={styles.placeholderText}>–ö–æ—Å–º–æ—Å –æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ø–æ—Å–ª–∞–Ω–∏–µ...</p>
                            <p className={styles.placeholderSubtext}>–°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ª–µ–≤–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
                        </div>
                    </div>
                </SwiperSlide>

                {insights.map((transit, index) => (
                    <SwiperSlide key={index} className={styles.swiperSlide}>
                            <div className={styles.transitCard}>
                                <div className={styles.transitIcons}>
                                    <span className={styles.planetIcon}>{planetIcons[transit.p1]}</span>
                                    <span className={styles.aspectIcon}>{aspectIcons[transit.aspect]}</span>
                                    <span className={styles.planetIcon}>{planetIcons[transit.p2]}</span>
                                </div>
                                <p className={styles.transitTagline}>{transit.tagline}</p>
                                <div className={styles.powerPill}>
                                    –°–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è: {transit.power}
                                </div>
                                <div className={styles.cardBody}>
                                    <h4 className={styles.insightTitle}>{transit.title}</h4>
                                    <div className={styles.markdown}>
                                        <ReactMarkdown>{transit.interpretation}</ReactMarkdown>
                                    </div>
                                    <h4 className={`${styles.insightTitle} ${styles.lessonTitle}`}>–£—Ä–æ–∫ –∏ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å</h4>
                                    <div className={styles.markdown}>
                                        <ReactMarkdown>{transit.lesson}</ReactMarkdown>
                                    </div>
                                </div>
                            </div>
                    </SwiperSlide>
                ))}
            </Swiper>
            </div>

            <div className={styles.animationContainer}>
                {showCrystals && (
                    <div className={`${styles.crystalsContainer} ${showFlash ? styles.flash : ''} ${isFading ? styles.fadeOut : ''}`}>
                        {insights.map((_, index) => (
                            <CrystalIcon key={index} isFilled={viewedInsights.has(index + 1)} />
                        ))}
                    </div>
                )}
                {isSynthesizing && <SynthesizingAnimation />}
                
                {isReadyToUnlock && (
                    <div className={styles.revealButtonContainer}>
                        <button 
                            className={styles.revealButton} 
                            onClick={() => setAnimationState('unlocked')}
                        >
                            –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≤–µ—Ç
                        </button>
                    </div>
                )}

                <div className={`${styles.unlockedContainer} ${isUnlocked ? styles.unlocked : ''}`}>
                    <div className={styles.unlockedContent}>
                        <div className={styles.summaryBlock}>
                            <h3 className={styles.blockTitle}>–û–±—â–∏–π –°–æ–≤–µ—Ç –ê—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞</h3>
                            <div className={styles.markdown}>
                                <ReactMarkdown>{data.summary || mockPlanetaryData.summary.content}</ReactMarkdown>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default AstrologyLens;
