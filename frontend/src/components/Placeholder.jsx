import React, { useState, useEffect } from 'react';
import styles from './Placeholder.module.css'; // –°–æ–∑–¥–∞–¥–∏–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

// –•—É–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
const useCapturedLogs = () => {
    const [logs, setLogs] = useState([]);

    useEffect(() => {
        const –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ = {
            log: console.log,
            error: console.error,
            warn: console.warn,
            info: console.info,
            debug: console.debug,
        };

        const BATCH_TIME = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
        let logBatch = [];
        let batchTimeout = null;

        const captureAndForward = (level) => (...args) => {
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –ª–æ–≥–∏ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏
            –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ[level](...args);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const message = args.map(arg => {
                try {
                    if (arg instanceof Error) {
                        return `Error: ${arg.message}\n${arg.stack}`;
                    }
                    if (typeof arg === 'object' && arg !== null) {
                        return JSON.stringify(arg, null, 2);
                    }
                    return String(arg);
                } catch (e) {
                    return '[[–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç]]';
                }
            }).join(' ');

            const timestamp = new Date().toISOString();
            logBatch.push({ level, message, timestamp });

            // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (batchTimeout) return;

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
            batchTimeout = setTimeout(() => {
                setLogs(prevLogs => [...prevLogs, ...logBatch]);
                logBatch = []; // –û—á–∏—â–∞–µ–º –±–∞—Ç—á
                batchTimeout = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            }, BATCH_TIME);
        };
        
        console.log = captureAndForward('log');
        console.error = captureAndForward('error');
        console.warn = captureAndForward('warn');
        console.info = captureAndForward('info');
        console.debug = captureAndForward('debug');

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            clearTimeout(batchTimeout);
            console.log = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ.log;
            console.error = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ.error;
            console.warn = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ.warn;
            console.info = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ.info;
            console.debug = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ.debug;
        };
    }, []);

    return logs;
};


const Placeholder = ({ error, debugInfo }) => {
    const logs = useCapturedLogs();
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    const botUrl = 'https://t.me/your_bot_name_here';

    const renderDebugValue = (value) => {
        if (typeof value === 'boolean') {
            return value ? '‚úÖ' : '‚ùå';
        }
        if (value === undefined || value === null) {
            return '‚ùì';
        }
        return String(value);
    };

    return (
        <div className={styles.placeholderContainer}>
            <div className={styles.placeholderContent}>
                <h1 className={styles.title}>Morpheus Dream</h1>
                <p className={styles.subtitle}>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–Ω–æ–≤</p>
                
                {error ? (
                    <div className={styles.errorBlock}>
                        {/* ‚úÖ –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ */}
                        <h4>{error.includes("–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏") ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏" : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"}</h4>
                        <p className={styles.error}>
                            {error}
                        </p>
                    </div>
                ) : (
                    <p className={styles.instruction}>
                        –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram.
                    </p>
                )}
                
                {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {debugInfo && Object.keys(debugInfo).length > 0 && (
                    <div className={styles.debug}>
                        <h3>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</h3>
                        <div className={styles.debugInfo}>
                            {Object.entries(debugInfo).map(([key, value]) => {
                                // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–∏—Ç–∏–≤—ã
                                if (typeof value === 'object' && value !== null) {
                                    return (
                                        <div key={key} className={styles.debugObject}>
                                            <p><strong>{key}:</strong></p>
                                            <div className={styles.debugNestedObject}>
                                                {Object.entries(value).map(([nestedKey, nestedValue]) => (
                                                    <p key={nestedKey}><strong>{nestedKey}:</strong> {renderDebugValue(nestedValue)}</p>
                                                ))}
                                            </div>
                                        </div>
                                    );
                                }
                                return (
                                    <p key={key}><strong>{key}:</strong> {renderDebugValue(value)}</p>
                                );
                            })}
                        </div>
                    </div>
                )}
                
                 {/* –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ */}
                 {logs.length > 0 && (
                    <div className={styles.logsContainer}>
                        <h3>üìú –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h3>
                        <pre className={styles.logsPre}>
                            {logs.map((log, index) => (
                                <div key={index} className={`${styles.logEntry} ${styles[log.level]}`}>
                                    <span className={styles.logTimestamp}>[{new Date(log.timestamp).toLocaleTimeString()}]</span>
                                    <span className={styles.logLevel}>[{log.level.toUpperCase()}]</span>
                                    <span className={styles.logMessage}>{log.message}</span>
                                </div>
                            )).reverse()}
                        </pre>
                    </div>
                )}


                <a href={botUrl} className={styles.telegramButton}>
                    –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                </a>
            </div>
        </div>
    );
};

export default Placeholder;
