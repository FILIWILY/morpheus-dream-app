import React from 'react';
import styles from './DreamBookLens.module.css';

const DreamBookLens = ({ content, highlightWords, accentColor, metadata }) => {
    if (!content) {
        return (
            <div className={styles.lensContentFlow}>
                <div className={styles.flowParagraph}>
                    <p className={styles.flowText}>{content || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                </div>
            </div>
        );
    }

    const highlightStyle = {
        color: accentColor,
        fontWeight: 'bold',
    };

    // –í–ê–†–ò–ê–ù–¢ 1: –ï—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç —Å **–∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏**
    // –ò—â–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –º–µ–∂–¥—É **...**
    const starsRegex = /\*\*([^*]+)\*\*/g;
    let processedContent = content;
    const wordsInStars = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –≤ **–∑–≤—ë–∑–¥–æ—á–∫–∞—Ö** –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∑–≤—ë–∑–¥–æ—á–∫–∏
    processedContent = content.replace(starsRegex, (match, word) => {
        wordsInStars.push(word.toLowerCase());
        return word; // –£–¥–∞–ª—è–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ highlightWords –∏ wordsInStars
    const allHighlightWords = [...new Set([
        ...(highlightWords || []),
        ...wordsInStars
    ])];

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
    if (allHighlightWords.length === 0) {
        processedContent = content.replace(/\*\*/g, ''); // –£–±–∏—Ä–∞–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const escapedWords = allHighlightWords.map(word => 
        word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    );
    const regex = new RegExp(`\\b(${escapedWords.join('|')})\\b`, 'gi');

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (—Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞)
    const parts = processedContent.split(regex);

    return (
        <div className={styles.lensContentFlow}>
            {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: —Ñ–∞–∑–∞ –õ—É–Ω—ã, –∑–Ω–∞–∫ –õ—É–Ω—ã, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
            {metadata && (
                <div className={styles.metadata}>
                    <span className={styles.metadataItem}>
                        üåô {metadata.moonPhase} –≤ {metadata.moonEmoji} {metadata.moonSign}
                    </span>
                    <span className={styles.metadataItem}>
                        üìÖ {metadata.weekday}
                    </span>
                </div>
            )}

            <div className={styles.flowParagraph}>
                <p className={styles.flowText}>
                    {parts.map((part, index) => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —á–∞—Å—Ç—å —Å –æ–¥–Ω–∏–º –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                        const isHighlight = highlightWords && highlightWords.some(word => word.toLowerCase() === part.toLowerCase());
                        
                        if (isHighlight) {
                            return <span key={index} style={highlightStyle}>{part}</span>;
                        }

                        // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                        return (
                            <React.Fragment key={index}>
                                {part.split(/(\n)/g).map((line, i) =>
                                    line === '\n' ? <br key={i} /> : line
                                )}
                            </React.Fragment>
                        );
                    })}
                </p>
            </div>
        </div>
    );
};

export default DreamBookLens;

